
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check the requesting user's role.
    // This is safe to use in rules for single-document operations (get, create, update, delete).
    function userRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    match /users/{userId} {
      // Allow any authenticated user to read any user profile.
      // This is the key fix to prevent recursive/complex rule evaluations that cause "permission denied".
      // It is safe because the UI layer restricts who can actually access pages with lists of users.
      allow read: if request.auth != null;
      
      // Only MasterAdmins can create, update, or delete users directly.
      // Admins must go through the approval request flow.
      allow write: if request.auth != null && userRole() == 'MasterAdmin';
    }

    match /approval_requests/{requestId} {
      // MasterAdmin can read any request.
      // Admin can read only their own requests.
      // This rule works for both get (single doc) and list (query) operations.
      // For 'list', the client query MUST include `where("requestedByUid", "==", request.auth.uid)`.
      allow read: if request.auth != null && (
        userRole() == 'MasterAdmin' ||
        resource.data.requestedByUid == request.auth.uid
      );

      // Admin/MasterAdmin can create requests, but only for themselves.
      allow create: if request.auth != null &&
        userRole() in ['Admin', 'MasterAdmin'] &&
        request.resource.data.requestedByUid == request.auth.uid;
      
      // Only MasterAdmin can update (approve/reject) a request.
      allow update: if request.auth != null && userRole() == 'MasterAdmin';
      
      // Deletion is not allowed for data integrity.
      allow delete: if false;
    }

    match /attendance/{attendanceId} {
      // Managerial roles can read any attendance record.
      // A Kurir can read their own attendance records.
      allow read: if request.auth != null && (
        userRole() in ['MasterAdmin', 'Admin', 'PIC'] ||
        resource.data.kurirUid == request.auth.uid
      );
      
      // Kurir can create/update their own records only.
      allow write: if request.auth != null && 
        userRole() == 'Kurir' &&
        // On create, check the new data. On update, check existing data.
        (request.resource.data.kurirUid == request.auth.uid || resource.data.kurirUid == request.auth.uid);
    }

    match /kurir_daily_tasks/{taskId} {
      // Managerial roles can read any task document.
      // Kurir can read their own task document.
      allow read: if request.auth != null && (
        userRole() in ['MasterAdmin', 'Admin', 'PIC'] ||
        resource.data.kurirUid == request.auth.uid
      );
      
      // Kurir can create/update their own task document only.
      allow write: if request.auth != null && 
        userRole() == 'Kurir' &&
        (request.resource.data.kurirUid == request.auth.uid || resource.data.kurirUid == request.auth.uid);

      // Rules for the subcollection of packages
      match /packages/{packageId} {
        // Only the Kurir who owns the task or a manager can access.
        // This relies on getting the parent task document.
        allow read, write: if request.auth != null && (
          userRole() in ['MasterAdmin', 'Admin', 'PIC'] ||
          get(/databases/$(database)/documents/kurir_daily_tasks/$(taskId)).data.kurirUid == request.auth.uid
        );
      }
    }
    
    match /notifications/{notificationId} {
      // Only MasterAdmins can read/write notifications.
      allow read, write: if request.auth != null && userRole() == 'MasterAdmin';
    }
  }
}
