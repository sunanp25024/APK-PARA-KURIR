
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user belongs to one of the specified roles.
    function isOneOfRoles(roles) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }

    // --- USERS Collection ---
    // Anyone logged in can read a user profile. This is required to break recursive
    // permission checks in other rules. The UI already restricts who can see lists of users.
    // Only MasterAdmin can create/update/delete users directly. Admins must use the approval flow.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isOneOfRoles(['MasterAdmin']);
    }

    // --- APPROVAL_REQUESTS Collection ---
    // MasterAdmins can do anything.
    // Admins can create new requests for themselves and read their own requests.
    match /approval_requests/{requestId} {
      allow read, update: if request.auth != null && isOneOfRoles(['MasterAdmin']);
      
      // An Admin can read an approval request IF they were the one who requested it.
      // This rule, combined with the query in the app, allows an Admin to see their "Pending Approvals".
      allow read: if request.auth != null && isOneOfRoles(['Admin']) && resource.data.requestedByUid == request.auth.uid;
      
      // An Admin can create a request IF the request is for themselves.
      allow create: if request.auth != null && isOneOfRoles(['Admin']) && request.resource.data.requestedByUid == request.auth.uid;
      
      // No one can delete approval requests to maintain audit trail.
      allow delete: if false;
    }

    // --- ATTENDANCE Collection ---
    // Kurir can create/update their own records.
    // Managerial roles can read any attendance records for reporting.
    match /attendance/{attendanceId} {
      allow read: if request.auth != null && isOneOfRoles(['PIC', 'Admin', 'MasterAdmin']);
      
      // A Kurir can read their own attendance records.
      allow read: if request.auth != null && isOneOfRoles(['Kurir']) && resource.data.kurirUid == request.auth.uid;

      // A Kurir can only create/update an attendance record for themselves.
      allow create, update: if request.auth != null && isOneOfRoles(['Kurir']) && request.resource.data.kurirUid == request.auth.uid;
        
      allow delete: if false;
    }

    // --- KURIR_DAILY_TASKS Collection (and subcollections) ---
    // Security is hierarchical. We define it on the main task document.
    match /kurir_daily_tasks/{taskId} {
      // Managerial roles can read any task document.
      allow read: if request.auth != null && isOneOfRoles(['PIC', 'Admin', 'MasterAdmin']);

      // A Kurir can read/write to their OWN task document.
      allow read, write: if request.auth != null && isOneOfRoles(['Kurir']) && resource.data.kurirUid == request.auth.uid;

      // Rules for the 'packages' subcollection inherit from the parent.
      // We add an extra layer to ensure only the assigned Kurir can write.
      match /packages/{packageId} {
        allow read: if request.auth != null; // Read is allowed if parent allows read.
        
        // Write is only allowed if the authenticated user is the Kurir assigned to the parent task.
        allow write: if request.auth != null && get(/databases/$(database)/documents/kurir_daily_tasks/$(taskId)).data.kurirUid == request.auth.uid;
      }
    }
    
    // --- NOTIFICATIONS Collection ---
    // Only MasterAdmins can read/write system-wide notifications.
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && isOneOfRoles(['MasterAdmin']);
    }
  }
}
