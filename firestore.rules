
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read their own profile.
    // MasterAdmins/Admins/PICs can read any user profile for management purposes.
    match /users/{userId} {
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['MasterAdmin', 'Admin', 'PIC']
      );
      // Create is handled by server-side functions or setup page.
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'MasterAdmin';
      // Only MasterAdmin can update directly. Admins use the approval flow.
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'MasterAdmin';
      // Only MasterAdmin can delete.
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'MasterAdmin';
    }

    // Approval Requests:
    // - MasterAdmins can read/update any.
    // - Admins can create new ones, and read their own.
    match /approval_requests/{requestId} {
      // GET (single doc): MasterAdmin can get any. Admin can get their own.
      allow get: if request.auth != null && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'MasterAdmin' ||
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin' && resource.data.requestedByUid == request.auth.uid)
      );

      // LIST (query): MasterAdmin can list all. Admin can only query their own requests.
      // This is the key fix: it inspects the query itself.
      allow list: if request.auth != null && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'MasterAdmin' ||
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin' && request.query.where.requestedByUid == request.auth.uid)
      );
      
      // CREATE: Admin/MasterAdmin can create. Must be for themselves.
      allow create: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Admin', 'MasterAdmin'] &&
        request.resource.data.requestedByUid == request.auth.uid;

      // UPDATE: Only MasterAdmin can approve/reject.
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'MasterAdmin';
      
      // DELETE: Not allowed for data integrity.
      allow delete: if false;
    }

    // Attendance:
    // - Kurir can create/read/update their own records.
    // - PICs/Admins/MasterAdmins can read any attendance records.
    match /attendance/{attendanceId} {
       // GET (single doc) or LIST (query)
      allow read: if request.auth != null && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['PIC', 'Admin', 'MasterAdmin'] ||
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Kurir' && request.query.where.kurirUid == request.auth.uid)
      );
      
      // A Kurir can only create an attendance record for themselves.
      allow create: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Kurir' &&
        request.resource.data.kurirUid == request.auth.uid;

      // A Kurir can only update their own record.
      allow update: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Kurir' &&
        resource.data.kurirUid == request.auth.uid;
        
      allow delete: if false; // Deleting attendance is generally not allowed
    }

    // Daily Tasks and sub-collection of packages
    match /kurir_daily_tasks/{taskId} {
      allow read, write: if request.auth != null && (
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Kurir' && request.resource.data.kurirUid == request.auth.uid) ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['PIC', 'Admin', 'MasterAdmin']
      );

      match /packages/{packageId} {
        allow read, write: if request.auth != null; // Allow read/write if authenticated, parent rule provides main security
      }
    }
    
    // Notifications for MasterAdmin
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'MasterAdmin';
    }
  }
}
