rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ========== HELPER FUNCTIONS ==========
    // It's often more readable and maintainable to use functions.

    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }

    function isRole(uid, roleName) {
      // Gracefully handle non-existent user docs during checks
      return exists(/databases/$(database)/documents/users/$(uid)) && getUserData(uid).role == roleName;
    }

    function isMasterAdmin(uid) {
      return isRole(uid, 'MasterAdmin');
    }

    function isAdmin(uid) {
      return isRole(uid, 'Admin') || isMasterAdmin(uid);
    }

    function isManager(uid) {
      return isRole(uid, 'PIC') || isAdmin(uid);
    }
    
    function isKurir(uid) {
      return isRole(uid, 'Kurir');
    }

    // Check if the requesting user is the owner of the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Check if the user's UID matches a field inside the document.
    function isOwnerOfRecord() {
      return request.auth.uid == resource.data.requestedByUid || request.auth.uid == resource.data.kurirUid;
    }


    // ========== USERS COLLECTION ==========
    match /users/{userId} {
      // Anyone can read their own profile. Managers can read any profile.
      allow read: if request.auth != null && (isOwner(userId) || isManager(request.auth.uid));
      
      // A user can create their own profile document (on signup).
      // This is necessary for the setup-admin page to work.
      allow create: if request.auth.uid == userId;

      // A user can update their own profile. MasterAdmin can update any profile.
      allow update: if request.auth != null && (isOwner(userId) || isMasterAdmin(request.auth.uid));
      
      // Only MasterAdmins can delete users.
      allow delete: if request.auth != null && isMasterAdmin(request.auth.uid);
    }

    // ========== ATTENDANCE COLLECTION ==========
    match /attendance/{attendanceId} {
      // ID format is {kurirUid}_{date}
      allow read: if request.auth != null && (isOwner(attendanceId.split('_')[0]) || isManager(request.auth.uid));
      allow create, update: if request.auth != null && isKurir(request.auth.uid) && isOwner(attendanceId.split('_')[0]);
      allow delete: if false; // Disallow client-side deletion
    }

    // ========== DAILY TASKS COLLECTION ==========
    match /kurir_daily_tasks/{taskId} {
      // ID format is {kurirUid}_{date}
      allow read: if request.auth != null && (isOwner(taskId.split('_')[0]) || isManager(request.auth.uid));
      allow create, update: if request.auth != null && isKurir(request.auth.uid) && isOwner(taskId.split('_')[0]);
      allow delete: if false; // Disallow client-side deletion
      
      match /packages/{packageId} {
        allow read: if request.auth != null && (isOwner(taskId.split('_')[0]) || isManager(request.auth.uid));
        allow create, update, delete: if request.auth != null && isKurir(request.auth.uid) && isOwner(taskId.split('_')[0]);
      }
    }

    // ========== APPROVAL REQUESTS COLLECTION ==========
    match /approval_requests/{requestId} {
      // MasterAdmins can read all. Admins can read their own.
      allow read: if request.auth != null && (isMasterAdmin(request.auth.uid) || isOwnerOfRecord());
      // Admins and MasterAdmins can create requests.
      allow create: if request.auth != null && isAdmin(request.auth.uid);
      // Only MasterAdmins can approve/reject by updating.
      allow update: if request.auth != null && isMasterAdmin(request.auth.uid);
      allow delete: if false;
    }

    // ========== NOTIFICATIONS COLLECTION ==========
    match /notifications/{notificationId} {
      // Only MasterAdmins can read/update notifications.
      allow read, update: if request.auth != null && isMasterAdmin(request.auth.uid);
      // Notifications are created by the backend (server action).
      allow create, delete: if false;
    }
  }
}
