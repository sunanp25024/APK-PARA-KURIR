
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function userExists(uid) {
      return exists(/databases/$(database)/documents/users/$(uid));
    }

    function userRole(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data.role;
    }

    match /users/{userId} {
      allow create: if request.auth.uid == userId ||
                       (userExists(request.auth.uid) && userRole(request.auth.uid) == 'MasterAdmin') ||
                       (userExists(request.auth.uid) && userRole(request.auth.uid) == 'Admin' && request.resource.data.role in ['PIC', 'Kurir']);

      allow read: if request.auth != null && (
                    request.auth.uid == userId ||
                    (userExists(request.auth.uid) && userRole(request.auth.uid) in ['MasterAdmin', 'Admin', 'PIC'])
                  );

      allow update: if request.auth != null && (
                      (request.auth.uid == userId && request.resource.data.role == resource.data.role) ||
                      (userExists(request.auth.uid) && userRole(request.auth.uid) == 'MasterAdmin') ||
                      (userExists(request.auth.uid) && userRole(request.auth.uid) == 'Admin' && resource.data.role in ['PIC', 'Kurir'])
                    );
      
      allow delete: if userExists(request.auth.uid) && userRole(request.auth.uid) == 'MasterAdmin';
    }

    match /approval_requests/{requestId} {
      allow create: if userExists(request.auth.uid) && userRole(request.auth.uid) == 'Admin' && request.resource.data.requestedByUid == request.auth.uid;
      allow read: if userExists(request.auth.uid) && (
                    (userRole(request.auth.uid) == 'Admin' && resource.data.requestedByUid == request.auth.uid) ||
                    userRole(request.auth.uid) == 'MasterAdmin'
                  );
      allow update: if userExists(request.auth.uid) && (
                      userRole(request.auth.uid) == 'MasterAdmin' ||
                      (userRole(request.auth.uid) == 'Admin' && resource.data.requestedByUid == request.auth.uid && request.resource.data.status == 'cancelled')
                    );
      allow delete: if false;
    }

    match /kurir_daily_tasks/{taskId} {
      function isOwnerOrManager() {
        let taskOwnerUid = taskId.split('_')[0];
        return request.auth.uid == taskOwnerUid || (userExists(request.auth.uid) && userRole(request.auth.uid) in ['PIC', 'Admin', 'MasterAdmin']);
      }
      allow read, write: if request.auth != null && isOwnerOrManager();
      
      match /packages/{packageId} {
        allow read, write: if request.auth != null && isOwnerOrManager();
      }
    }
    
    match /notifications/{notificationId} {
        allow read: if userExists(request.auth.uid) && userRole(request.auth.uid) in ['MasterAdmin'];
        allow create: if userExists(request.auth.uid) && userRole(request.auth.uid) in ['Admin', 'MasterAdmin'];
        allow update: if userExists(request.auth.uid) && userRole(request.auth.uid) in ['MasterAdmin'];
    }

    match /attendance/{attendanceId} {
      function isRecordOwner() {
        return request.auth.uid == attendanceId.split('_')[0];
      }
      
      allow write: if request.auth != null && isRecordOwner();
      
      allow read: if request.auth != null && (
                    isRecordOwner() || 
                    (userExists(request.auth.uid) && userRole(request.auth.uid) in ['PIC', 'Admin', 'MasterAdmin'])
                  );
    }
  }
}
